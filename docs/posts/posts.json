[
  {
    "path": "posts/2021-01-29-uml-seq-diag/",
    "title": "Drawing a UML Sequence Diagram",
    "description": "Search for the way to draw a UML sequence diagram.",
    "author": [
      {
        "name": "Emi Tanaka",
        "url": "https://emitanaka.org"
      }
    ],
    "date": "2021-01-29",
    "categories": [],
    "contents": "\nA sequence diagram, as described in wikipedia, shows objects interactions arranged in time sequence. One of the standards for drawing this is using the Unified Modelling Language (UML) managed by the Object Management Group (OMG).\nUML was developed in the field of software engineering to provide a standard way to visualise the design of a system. It’s a language that describes standards for all sorts of diagrams, not just the sequence diagram, e.g. communication diagram, interaction overview diagram and so on.\nThe interaction of actors with the system depicted as objects with passage of time depicted as a vertical dotted line (a.k.a. lifeline) seemed like a good fit to use for illustrating the concept of edibble.\nOmnigraffle\nI always find drawing complicated diagrams to be tricky via programming so I initially drew the diagram using OmniGraffle. There were some UML stencils and I thought it was going well (result in Figure 1). Aligning the objects as a sequence diagram, even with OmniGraffle’s precise object placement, was a bit difficult but it got the job done in the end.\n\n\n\nFigure 1: Drawn using OmniGraffle\n\n\n\nThen I wanted to change and reorder some elements of the diagram. It’s already taken me half a day to make a Figure 1, I really didn’t want to repeat the process. Surely, there must be another tool that will make this easier?\nOnline tools\nAnd thus began my journey (and what felt like a rabbit hole) in finding other tools to draw a sequence diagram. I found several online mapping solutions including Lucidchart and Visual Paradigm but it wasn’t what I was after. Eventually I came across GitMind. It was the most promising to me: it has a nice user interface, the features that I want and it happened to be completely free! It was easier than OmniGraffle to make sequence diagrams. You can find the result of the drawing in Figure 2.\n\n\n\nFigure 2: Drawn using GitMind.\n\n\n\nOne thing to keep in mind is that the font for the PDF version is not rendered correctly. This is perhaps I’ve chosen a font available only in my system (“Fira Code”).\nOkay, looks like I’m good with this. Let’s use this in the edibble documentation… Wait the interaction between the statisitican and Design doesn’t fit the narrative well, I need to modify the diagram again!\nThis was a point when I realise I really need to programmatically create the diagram. Being somewhat of an anti click-and-point statistical software, I should have perhaps pursued the programmatic route earlier.\nR\nThe most comprehensive R-package to draw a diagram is DiagrammeR. When you go to the website (which has an impressively interface) it has the tagline “Sometimes You Want To Create Nice Diagrams: WHY NOT DO THAT WITH R?”. That’s a good question to ask past Emi.\nDiagrammeR\nUnder the hood, DiagrammeR it’s powered by Graphviz and mermaid. Sequence diagrams are supported by mermaid but there seems to be no distinguishment between an actor and an object. It seems like you always have to a message when actor/object is interacting.\n\n\nDiagrammeR::mermaid(\"\nsequenceDiagram\n    domain expert->>statistician: consult\n    statistician-->>domain expert: query\n    statistician->>Design: start_design()\n    statistician->>Design: set_units()\")\n\n\n\n\n{\"x\":{\"diagram\":\"\\nsequenceDiagram\\n    domain expert->>statistician: consult\\n    statistician-->>domain expert: query\\n    statistician->>Design: start_design()\\n    statistician->>Design: set_units()\"},\"evals\":[],\"jsHooks\":[]}\nFigure 3: Drawn using mermaid via DiagrammeR\n\n\n\nIt’s fairly good and you can further customise the look using CSS, but it doesn’t have the actor symbol and some other standard UML symbols, it will be too much effort by me to recreate what I made using GitMind.\nnomnoml\n\n\n\nFigure 4: Drawn using nomnoml.com\n\n\n\nThe nomnoml R-package describes itself as a Sassy UML Diagrams for R. It’s powered by the nomnoml tool which has a nice simple website to create the diagrams you want. I quite enjoy using the website version where the graph renders instantenously using a simple syntax. The graph made using the web (Figure 4) is different to the one produced via R shown below along with the nomnoml syntax.\n\n[<actor>domain expert] -- [<hidden> fin1]\n[<actor>statistician] -- [<hidden> fin2]\n[design] -- [<end> end]\n[<database> data] -- [<hidden> hid]\n[<actor>technician] -- [<hidden> fin3]\n\n{\"x\":{\"code\":\"\\n#fill: #FEFEFF\\n#lineWidth: 1\\n#zoom: 4\\n#direction: right\\n\\n[<actor>domain expert] -- [<hidden> fin1]\\n[<actor>statistician] -- [<hidden> fin2]\\n[design] -- [<end> end]\\n[<database> data] -- [<hidden> hid]\\n[<actor>technician] -- [<hidden> fin3]\",\"svg\":false},\"evals\":[],\"jsHooks\":[]}\nIt turns out thought that the nomnoml doesn’t support sequence diagrams and it doesn’t look like it will support it any time either.\nplantuml\nI came across another R-package for UML diagrams called plantuml. It’s powered by the the plantUML tool which has a extensive support for a sequence diagram (yes!).\nThis one is not on CRAN yet. I initially had trouble getting it to work but managed to work re-installing GraphViz. I could get the example code to work but the code for sequence diagram didn’t work for me so I used the online version of plantUML directly.\nI expanded a lot more than previous graphs with plantUML code below. The problem I realise now is that the image has become too big and too much text to be concise. So I’ll have to tweak some more (when does this end?). At least now making an adjustment isn’t hard this time!\n@startuml\nactor \"domain expert\" as expert #fff\nactor statistician as stat #AD0059\nparticipant design as design #fff\ndatabase data as data #fff\nactor technician as tech #fff\n== Conceptualizing the experiment ==\ngroup Consultation\nexpert -> stat: I want to test which wheat variety is best\nstat -> design: library(edibble)\\nstart_design(name = \"wheat\")\nactivate design\nstat -> design: set_context(aim = \"identify best variety\")\nstat -> expert: What varieties are you testing?\nexpert -->> stat: I'm testing Mace and RockStar\nstat -> design: set_trts(var = c(\"Mace\", \"RockStar\"))\nexpert -->> stat: I have a field with 20 plots each at Narrabri and\\n10 plots at Roseworthy that I can use for testing\nstat -> design: set_units(site = c(\"Narrabri\", \"Roseworthy\"),\\n.               plot = nested_in( site,\\n                                    \"Narrabri\" ~ 20,\\n                              \"Roseworthy\" ~ 10))\nstat -> expert: What do you consider as \"best\"?\nexpert -> stat: For now, I just want to select one that'll give me\\nthe highest yield.\nstat -> design: set_rcrds(yield = plot)\nstat -> expert: What's range of values do you expect for the yield?\nexpert -->> stat: Well it never goes over 10 tonnes per hectre in my fields!\nstat -> design: expect_rcrds(yield = to_be_numeric( with_value( between = c(0, 10))))\nstat -> expert: Do you have any restrictions in allocation of varieties at site or plots?\nexpert -->> stat: No.\nstat -> design: allocate_trts(var ~ plot)\nstat -> design: plot()\ndesign -->> stat\nstat -> expert: Well, this is my current understanding of the structure.\\nHave I understood it correctly?\nexpert -->> stat: That looks right.\nstat -->> expert: Okay I'll send the design when it's ready.\nend \nstat -> design: **randomise_trts()**\nstat -> design: serve_table()\ndesign -> data: export_design()\nactivate data\ndeactivate design\nstat -> design !!: end session\nexpert -> data: inspect\ntech -> data: inquire\ntech -> data: data entry\ngroup opt [invalid entry]\ndata -->> tech: error\nend\n== Import data and analyse==\n@enduml\n\n\n\nFigure 5: Drawn using plantUML\n\n\n\nIn the end the solution wasn’t quite R, but perhaps it will be when the plantuml package upgrades or other solutions are developed.\n\n\n\n",
    "preview": "posts/2021-01-29-uml-seq-diag/seq-diag-omnigraffle.png",
    "last_modified": "2021-01-29T21:03:49+11:00",
    "input_file": "uml-seq-diag.utf8.md",
    "preview_width": 863,
    "preview_height": 708
  },
  {
    "path": "posts/travel2019/",
    "title": "My Travel Schedule 2019: Building an interactive visualisation as twitter card",
    "description": "Making an interactive schedule heat map with\ninteractive twitter card display.",
    "author": [
      {
        "name": "Emi Tanaka",
        "url": "https://emitanaka.org"
      }
    ],
    "date": "2019-03-26",
    "categories": [],
    "contents": "\n\n\n\n\n\n{\"x\":{\"url\":\"travel2019_files/figure-html5//widgets/widget_travelschedule.html\",\"options\":{\"xdomain\":\"*\",\"allowfullscreen\":false,\"lazyload\":false}},\"evals\":[],\"jsHooks\":[]}\n Hovering over the above graph will show you more details. This year I have a fair bit of travel scheduled including:\nEco Sta 2019 at Taichung, Taiwan,\nISI WSC 2019 at Kuala Lumpur, Malaysia,\nYSC 2019 at Canberra, Australia, and\nBiometrics by the Botanic Garden 2019 at Adelaide, Australia.\nIf you happen to be going to the same conference as myself, do get in touch and maybe you can pay for my taxi? :) (I forgot to put it in my budget …)\nThe code to make the above graph is shown below. This post benefit largely from this post here to turn plotly output into interactive twitter card.\n\n\nlibrary(tidyverse)\nlibrary(tsibble)\nlibrary(googlesheets)\nlibrary(highcharter)\nlibrary(widgetframe)\n\n# get the data\ndate_range <- tibble(\n  Dates = as.Date(c(\"06/03/2019\", \"12/31/2019\"), format = \"%m/%d/%Y\"),\n  Location = \"Sydney, Australia\"\n) # the start to end for schedule show\nkey <- gs_key(\"1T7aH5PzQghU0htnqOjzzEyfe0qdWs_L-1Ybu9PX-rYY\")\ntravel_df <- gs_read(key, col_types = list()) %>%\n  mutate(\n    Start = as.Date(Start, format = \"%m/%d/%Y\"),\n    End = as.Date(End, format = \"%m/%d/%Y\")\n  ) %>%\n  pivot_longer(Start:End, names_to = \"Time\", values_to = \"Dates\") %>%\n  as_tsibble(key = Event, index = Dates) %>%\n  fill_gaps(Time = \"Between\") %>%\n  group_by(Event) %>%\n  fill(FullEvent, URL, Location, What, .direction = \"down\") %>%\n  ungroup() %>% # this part feels clumsy.. probably better way to do this\n  bind_rows(date_range) %>%\n  as_tibble() %>%\n  mutate(Key = \"All\") %>%\n  as_tsibble(key = Key, index = Dates) %>%\n  fill_gaps(Location = \"Sydney, Australia\", Event = \"\", What = \"\", FullEvent = \"\") %>%\n  mutate(\n    Day = substring(weekdays(Dates), 1, 3),\n    Week = lubridate::isoweek(Dates)\n  ) %>%\n  filter(Week != 1)\n\n\n\n\n\nfntltp <- JS(\"function(){\n              return '<b style=\\\"color:#DC5084\\\">' + this.point.event + '<\/b><br><span style=\\\"font-size:0.7em\\\">' +  this.series.yAxis.categories[this.point.y] + ', ' +\n             this.point.date + '<\/span><br><span style=\\\"font-size:0.7em\\\">' + this.point.name + '<\/span><br><span style=\\\"font-size:0.7em;color:#FFFFCC\\\">' + this.point.what + '<\/span><br>'+ this.point.loc;\n             }\")\n\nhcout <- hchart(travel_df, \"heatmap\", hcaes(\n  x = factor(Week),\n  y = factor(Day, levels = c(\"Sun\", \"Sat\", \"Fri\", \"Thu\", \"Wed\", \"Tue\", \"Mon\")),\n  group = Location,\n  loc = Location,\n  event = Event,\n  what = What,\n  name = FullEvent,\n  date = Dates\n),\nstyle = list(fontSize = \"2em\", fontFamily = \"Helvetica\")\n) %>%\n  hc_tooltip(formatter = fntltp) %>%\n  # hc_tooltip(crosshairs=TRUE, pointFormat = \"y: {point.y}<br>x: {point.x}\") %>%\n  hc_title(text = \"My 2019 Travel Schedule\", style = list(fontWeight = \"bold\")) %>%\n  hc_subtitle(text = \"Hover over the tile to see more information\") %>%\n  hc_size(height = 225) %>%\n  hc_legend(enabled = FALSE) %>%\n  hc_yAxis(title = \"\") %>%\n  hc_xAxis(\n    title = \"\", categories = c(\"Jun\", \"\", \"\", \"\", \"Jul\", \"\", \"\", \"\", \"Aug\", \"\", \"\", \"\", \"Sep\", \"\", \"\", \"\", \"\", \"Oct\", \"\", \"\", \"\", \"Nov\", \"\", \"\", \"\", \"Dec\", \"\", \"\", \"\"),\n    endOnTick = FALSE\n  ) %>%\n  hc_add_theme(hc_theme_538()) %>%\n  hc_plotOptions(heatmap = list(borderColor = \"black\", borderWidth = 1))\n\nframeWidget(hcout)\n\n\n\n\n\n\n",
    "preview": {},
    "last_modified": "2021-01-25T17:20:26+11:00",
    "input_file": {}
  },
  {
    "path": "posts/hexsticker/",
    "title": "Making a Hexagon Sticker",
    "description": "Making hexagon stickers have become popular for\nR-packages with the range of packages associated with\nRStudio, such as `ggplot2`, `knitr`, `devtools` and so\non, having its own hex stickers. For the sticker that I\nmade for my R-package I found it easier, partly due to\nits long name, to use powerpoint to manipulate the\nimage and create a semi-circular text.",
    "author": [
      {
        "name": "Emi Tanaka",
        "url": "https://emitanaka.org"
      }
    ],
    "date": "2018-04-06",
    "categories": [],
    "contents": "\n Making hexagon stickers have become popular for R-packages with the range of packages associated with RStudio, such as ggplot2, knitr, devtools and so on, having its own hex stickers.\nThis trend even spanned a R-package hexSticker that can be found here.\nPowerpoint template for hex stickers\nFor the sticker that I made for my R-package shinycustomloader, I found it easier, partly due to its long name, to use powerpoint to manipulate the image and create a semi-circular text. It took longer than what I had hoped to get the hexagon shape right. You may like to save your own time by downloading my powerpoint template here as a base to make your own.\nThe dimensions were set, as it is in hexSticker, so that you can print it according to http://hexb.in/sticker.html.\nUsing copyright images in hex stickers\nIt’s worth noting about copyright of images since you may like to use images in your hex sticker. If you created the image on your own then the copyright in general will rest with you and there is no problem. If you borrow images from others, you may need to provide attribution depending on their license permission.\nIn hex stickers, you don’t really have a room to add citations so you may like to use those that require no attribution. For free ones, you can find these using sites such as flickr under Public Domain works (CC0).\nIt is a bit painful to consider copyright issues but it is important to give due credit, acknowledgement, attribution etc to the creator of the work. I’ve gone to great lengths at times to search for CC0 images or have paid for work. Afterall, creative work is valuable and should be properly rewarded.\nUPDATE 22/06 My sticker arrived! They are pretty good quality! I also got 16 which is more than the 10 sample they said on the website \n\nThese are from sticker mule. If you sign up with referral code here, both you and I will get some credit. You are, of course, welcomed to just go directly to the site to make the purchase.\n\n\n\n\n",
    "preview": "posts/hexsticker/hexsticker.gif",
    "last_modified": "2021-01-25T17:20:04+11:00",
    "input_file": {}
  }
]
